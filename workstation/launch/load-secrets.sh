#!/usr/bin/env bash
set +e && source "/etc/profile" &>/dev/null && set -e
# quick edit: FILE="$KIRA_MANAGER/launch/load-secrets.sh" && rm $FILE && nano $FILE && chmod 555 $FILE
echoInfo "INFO: Loading secrets..."

MNEMONICS="$KIRA_SECRETS/mnemonics.env"
mkdir -p "$KIRA_SECRETS"
touch $MNEMONICS

function MnemonicGenerator() {
    local name=""
    local type=""
    getArgs "$1" "$2" --gargs_throw=false --gargs_verbose="true"
    if [ -z "$name" ] || [ -z "$type" ] ; then
        echoErr "ERROR: Failed MnemonicGenerator, the 'name' ('$name') flag was NOT defined or key 'type' ('$type') flag is invalid."
    else
        name=$(toLower "$name")
        type=$(toLower "$type")
    fi

    local MNEMONICS="$KIRA_SECRETS/mnemonics.env"

    # master mnemonic used to derive other mnemonics
    local masterMnemonic="$(tryGetVar MASTER_MNEMONIC "$MNEMONICS")"
    # expected variable name
    local mnemonicVariableName=$(toUpper "${name}_${type}_MNEMONIC")
    # Default entropy == "${masterMnemonic} ; ${name} ${type}"
    local entropyHex=$(echo -n "${masterMnemonic} ; ${name} ${type}" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]' | sha256sum | awk '{ print $1 }' | xargs)

    local valkeyPath="$KIRA_SECRETS/priv_$(toLower "${name}")_key.json"
    local nodekeyPath="$KIRA_SECRETS/$(toLower "${name}")_node_key.json"
    local keyidPath="$KIRA_SECRETS/$(toLower "${name}")_node_id.key"

    mnemonic="$(tryGetVar "$mnemonicVariableName" "$MNEMONICS")"
    mnemonic=$(echo "$mnemonic" | xargs || echo -n "")

    if (! $(isMnemonic "$mnemonic")) ; then # if mnemonic is not present then generate new one
        echoInfo "INFO: $mnemonicVariableName was not found, regenerating..."
        mnemonic=$(echo ${mnemonic//,/ } | xargs || echo -n "")
        if (! $(isMnemonic "$mnemonic")) ; then
            if (! $(isMnemonic "$masterMnemonic")) ; then
                echoErr "ERROR: Master mnemonic was not specified, keys can NOT be derived :(, please define '$mnemonicVariableName' variable in the '$MNEMONICS' file"
                exit 1
            fi

            mnemonic="$(bip39gen mnemonic --length=24 --raw-entropy="0x${entropyHex}" --verbose=false --hex=true)"
        fi
        setVar "$mnemonicVariableName" "$mnemonic" "$MNEMONICS" 1> /dev/null
    fi

    if [ "$type" == "val" ] ; then
        echoInfo "INFO: Ensuring $name private key is generated"
        if [ ! -f "$valkeyPath" ] ; then # validator key is only re-generated if file is not present
            rm -fv "$valkeyPath" && touch "$valkeyPath"
            validator-key-gen --mnemonic="$mnemonic" --valkey="$valkeyPath"
        fi
    elif [ "$type" == "node" ] ; then
        echoInfo "INFO: Ensuring $name nodekey files are generated"

        nodeIdVariableName="$(toUpper "${name}")_NODE_ID"
        nodeId="$(tryGetVar "$nodeIdVariableName" "$MNEMONICS")"
        
        if [ ! -f "$keyidPath" ] || [ ! -f "$nodekeyPath" ] ; then # node keys are only re-generated if any of keystore files is not present
            rm -fv "$keyidPath" "$nodekeyPath" && touch "$keyidPath" "$nodekeyPath" 
            validator-key-gen --mnemonic="$mnemonic" --nodekey="$nodekeyPath" --keyid="$keyidPath"
        fi
    
        newNodeId=$(cat $keyidPath)
        if [ -z "$nodeId" ] || [ "$nodeId" != "$newNodeId" ] ; then
            setVar "$nodeIdVariableName" "$newNodeId" "$MNEMONICS"
        fi
    elif [ "$type" == "addr" ] ; then
        echoInfo "INFO: $name address key does not require any kestore files"
    else
        echoErr "ERROR: Invalid key type ${type}, must be valkey, nodekey, addrkey"
        exit 1
    fi
}

declare -l INFRA_MODE=$(globGet INFRA_MODE)
declare -l MASTER_MNEMONIC="$(tryGetVar MASTER_MNEMONIC "$MNEMONICS")"

if [ "$MASTER_MNEMONIC" == "autogen" ] ; then
    echoInfo "INFO: Master mnemonic was requested to be autogenerated, computing new master mnemonic..."
    LOCAL_ENTROPY=$(openssl rand -hex 1024 | sha256sum | awk '{ print $1 }' | xargs)
    MASTER_MNEMONIC_1="$(bip39gen mnemonic --length=24 --entropy="0x${LOCAL_ENTROPY}" --hex=true --verbose=false)"
    MASTER_MNEMONIC_2="$(bip39gen mnemonic --length=24 --entropy="0x${LOCAL_ENTROPY}" --hex=true --verbose=false)"
    if [ "$MASTER_MNEMONIC_1" == "$MASTER_MNEMONIC_2" ] ; then
        echoErr "ERROR: Detected unsafe behaviour of the 'bip39gen' tool, master mnemonic must be unique every time it is generated even if additional entropy is used!"
        exit 1
    fi
    setVar MASTER_MNEMONIC "$MASTER_MNEMONIC_2" "$MNEMONICS" 1> /dev/null
fi

if [ "$INFRA_MODE" == "validator" ] ; then
    MnemonicGenerator --name="validator" --type="addr"  # validator address
    MnemonicGenerator --name="validator" --type="node"  # validator node key (validator_node_key.json, validator_node_id.key -> VALIDATOR_NODE_ID)
    MnemonicGenerator --name="validator" --type="val"   # validator block signing key (priv_validator_key.json)
elif [ "$INFRA_MODE" == "seed" ] ; then
    MnemonicGenerator --name="seed" --type="node"       # seed node key
elif [ "$INFRA_MODE" == "sentry" ] ; then
    MnemonicGenerator --name="sentry" --type="node"     # sentry node key (sentry_node_key.json, sentry_node_id.key -> SENTRY_NODE_ID)
fi

MnemonicGenerator --name="signer" --type="addr" # INTERX message signing key
MnemonicGenerator --name="test" --type="addr"   # generic test key
MnemonicGenerator --name="test" --type="node"   # connection test node key

source $MNEMONICS

echoInfo "INFO: Secrets loaded..."